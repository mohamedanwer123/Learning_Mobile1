Definition:
Strings, which are widely used in Java programming, are a sequence of characters. In Java programming language, strings are treated as objects.

Creating Strings:
The most direct way to create a string is to write -
String greeting = "Hello world!";


Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, "Hello world!'.
As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.
Example 
public class StringDemo {

   public static void main(String args[]) {
      char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };
      String helloString = new String(helloArray);  
      System.out.println( helloString );
   }
}
This will produce the following result -
Output
hello

String Length:
Methods used to obtain information about an object are known as accessor methods. One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.
The following program is an example of length(), method String class.
Example

public class StringDemo {

   public static void main(String args[]) {
      String palindrome = "Dot saw I was Tod";
      int len = palindrome.length();
      System.out.println( "String Length is : " + len );
   }
}
This will produce the following result -
Output  :   String Length is : 17



Creating Format Strings: 
You have printf() and format() methods to print output with formatted numbers.
Example
System.out.printf("The value of the float variable is " +
                  "%f, while the value of the integer " +
                  "variable is %d, and the string " +
                  "is %s", floatVar, intVar, stringVar);



String Methods:
Here is the list of  some  methods supported by String class -
Sr.No.	Method & Description
1	char charAt(int index)
Returns the character at the specified index.
2	int compareTo(Object o)
Compares this String to another Object.
3	int compareTo(String anotherString)
Compares two strings lexicographically.
4	int compareToIgnoreCase(String str)
Compares two strings lexicographically, ignoring case differences.
5	String concat(String str)
Concatenates the specified string to the end of this string.
6	boolean contentEquals(StringBuffer sb)
Returns true if and only if this String represents the same sequence of characters as the specified StringBuffer.
7	static String copyValueOf(char[] data)
Returns a String that represents the character sequence in the array specified.
	
	
8	boolean equals(Object anObject)
Compares this string to the specified object.
	
9	byte getBytes()
Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.
10	byte[] getBytes(String charsetName)
Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.
11	void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
Copies characters from this string into the destination character array.
12	int hashCode()
Returns a hash code for this string.
13	int indexOf(int ch)
Returns the index within this string of the first occurrence of the specified character.
14	int indexOf(int ch, int fromIndex)
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.
15	int indexOf(String str)
Returns the index within this string of the first occurrence of the.
	
16	int length()
Returns the length of this string.
